package com.apama.adbc;

//*****************************************************************************
// ADBC (Apama Database Connector) Connectivity Plugin Event Definitions.
//
// Provides definitions for all events sent to or from the ADBC Connecticivity Plugin. 
//
// $Copyright (c) 2013, 2015 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$
// Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
//
//*****************************************************************************

/**
* Event in response to the StartQuery event to indicate the result's schema.
*
* Note: This event will be sent before the first ResultEvent and only if 
* ReturnType is set to ResultEvent.
*
* See also: StartQuery()
*
* Dataplayer: <br>
*     - Direction: Correlator to client
*
*     Channel: <verbatim><</verbatim>serviceId<verbatim>></verbatim>.Control
*/
event ResultSchema {
	/** Unique id for this query. */
	integer messageId;
	/** The order of the fields in the schema. */
	sequence <string> fieldOrder;
	/** The types of the fields in the schema. */
	dictionary <string, string> fieldTypes;
}

/** A specialised simpler kind of command that just populates a new row with values */
event Store {
	integer messageId;
	string tableName;
	dictionary<string, any> row;
}


/** Execute an SQL statement */
event Statement {
	/** Unique id identifying this Statement */
	integer messageId;
	/** SQL to run */
	string sql;
	/** Parameters for prepared statement */
	sequence<any> parameters;
}

/** Individual row from a ResultSet. Zero or more are sent in response to a Statement. */
event ResultSetRow {
	/** Unique id identifying the Statement that this is in response to */
	integer messageId;
	/** unique Id for each row
	* This is useful if you ned to rerun a query and dont 
	* expect the underlying data to change.
	*/
	integer rowId;
	/** The result data. */
	dictionary <string, any> row;
}

/** Response to Statement */
event StatementDone {
	/** Unique id identifying the Statement that this is in response to */
	integer messageId;

	/** Number of rows updated by the Statement */
	integer updateCount;

	// TODO - more sophisticated error reporting
	optional<string> error;
}
