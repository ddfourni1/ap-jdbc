# This workflow installs Apama Community Edition and uses it to run PySys tests for your application

# Using this workflow implies that you have agreed to the terms of the Software AG license agreement - see http://www.apamacommunity.com/terms-conditions/

name: PySys

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    env:
      # Keep this updated with the latest version from http://www.apamacommunity.com/downloads/
      WORKFLOW_APAMA_VERSION: 10.5.3.3

    strategy:
      # Disable fail fast since it's useful to see test results for all platforms even if some failed
      fail-fast: false
      
      matrix:
        include:
          - run-id: amd64_linux
            os: ubuntu-latest
            release-docs: true
            
          #- run-id: amd64_win
          #  os: windows-latest
            
    runs-on: ${{matrix.os}}
    
    services:
        mysql:
            image: mysql:5.7
            env:
                MYSQL_ALLOW_EMPTY_PASSWORD: yes
                MYSQL_DATABASE: innodb
            ports:
                - 3306
            options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      # Install the full Apama Community Edition. This contains useful tools such as apamadoc which are not in the 
      # smaller "core" package
      - run: echo "APAMA_INSTALLER_PATH=$HOME/apama-installer" >> $GITHUB_ENV
      - name: Get Apama installer from cache
        uses: actions/cache@v2
        with:
            path: ${{ env.APAMA_INSTALLER_PATH }}/apama.zip
            key: apamainstaller-${{ matrix.run-id }}-${{ env.WORKFLOW_APAMA_VERSION }}-zip

      - name: Download and install Apama
        shell: bash
        run: |
          if [[ ! -f ${APAMA_INSTALLER_PATH}/apama.zip ]]; then
            echo Downloading Apama - not yet in the local cache
            mkdir --parents ${APAMA_INSTALLER_PATH}
            wget --no-verbose -O ${APAMA_INSTALLER_PATH}/apama.zip https://downloads.apamacommunity.com/apama/${WORKFLOW_APAMA_VERSION}/apama_${WORKFLOW_APAMA_VERSION}_${{ matrix.run-id }}.zip
          fi

          # We cache the zip not the unzipped dir, since caching the unpacked dir is currently slower than unpacking it each time
          pushd ${APAMA_INSTALLER_PATH}
          unzip -q apama.zip
          mv apama_*/* ./
          popd
          
          cat > $HOME/apama-installer-script.txt << EOF
          LicenseAgree=Accept
          InstallProducts=e2ei/11/.latest/Apama/PAMServer
          PAM.Work.Directory.ID=__VERSION1__,$HOME/apama-work
          InstallDir=$HOME/softwareag
          sagInstallerLogFile=$HOME/softwareag-installer.log
          imageFile=$APAMA_INSTALLER_PATH/data/SAGImage.zip
          EOF
          
          ${APAMA_INSTALLER_PATH}/install -readScript $HOME/apama-installer-script.txt
          
          # Once installed, copy the most important env vars into the workflow's env for later steps
          . $HOME/softwareag/Apama/bin/apama_env
          echo "APAMA_HOME=$APAMA_HOME" >> $GITHUB_ENV
          echo "$PATH" >> $GITHUB_PATH
          echo "$LD_LIBRARY_PATH" >> $GITHUB_PATH

      - uses: actions/checkout@v2

      - name: Build project
        shell: bash
        run: |
          . $APAMA_HOME/bin/apama_env
          ant

      - name: PySys tests
        working-directory: test
        shell: bash
        id: pysys
        run: |
          . $APAMA_HOME/bin/apama_env
          # TODO: add ci option once we're on 10.7
          pysys.py run --outdir=`pwd`/__pysys_output/${{matrix.run-id}} --purge -Xeplcoverage

      # If any tests fail, PySys will return an error code, so we need "if: always()" so the following steps will run
      # Since we expect failures only from the cookbook sample, that's the one we upload artifacts for (using id=pysys)
      # The follow lines are a copy from the sample pysys workflow

      #- name: Upload performance CSV artifacts
      #  uses: actions/upload-artifact@v2
      #  # Only do this if some performance results were generated
      #  if: always() && steps.pysys.outputs.artifact_CSVPerformanceReport
      #
      #  with:
      #    name: pysys_performance_${{matrix.test-run-id}}
      #    path: ${{ steps.pysys.outputs.artifact_CSVPerformanceReport }}

      - name: Build apamadoc
        shell: bash
        run: |
          . $APAMA_HOME/bin/apama_env
          apamadoc __build/apamadoc eventdefinitions
      - name: Upload apamadoc to gh-pages
        if: ${{matrix.release-docs}}
        #if: github.event_name == 'release'
        uses: JamesIves/github-pages-deploy-action@3.6.2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: __build/apamadoc

      # TODO: could also upload epl code coverage (in 10.7.1 this will be automatic) 
      
      - name: Upload archive artifacts for any test failures
        uses: actions/upload-artifact@v2
        if: failure()

        with:
          name: pysys_output_${{matrix.run-id}}
          path: test/__pysys_output/${{matrix.run-id}}
